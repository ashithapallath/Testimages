import cv2
import numpy as np
import matplotlib.pyplot as plt
from scipy import ndimage

# Function to add Gaussian noise
def add_gaussian_noise(image, mean=0, var=0.1):
    row, col = image.shape
    sigma = var ** 0.5
    gaussian = np.random.normal(mean, sigma, (row, col))
    noisy_image = np.uint8(np.clip(image + gaussian, 0, 255))
    return noisy_image

# Function to add salt and pepper noise
def add_salt_and_pepper_noise(image, salt_prob=0.01, pepper_prob=0.01):
    noisy_image = image.copy()
    total_pixels = image.size
    num_salt = int(total_pixels * salt_prob)
    num_pepper = int(total_pixels * pepper_prob)

    # Add salt noise
    salt_coords = [np.random.randint(0, i - 1, num_salt) for i in image.shape]
    noisy_image[salt_coords[0], salt_coords[1]] = 255

    # Add pepper noise
    pepper_coords = [np.random.randint(0, i - 1, num_pepper) for i in image.shape]
    noisy_image[pepper_coords[0], pepper_coords[1]] = 0

    return noisy_image

# Function to apply a custom sharpening filter
def sharpen_image(image):
    kernel = np.array([[0, -1, 0], [-1, 5,-1], [0, -1, 0]])
    return cv2.filter2D(image, -1, kernel)

# Function to apply Laplacian filter (4-connected)
def laplacian_4_connected(image):
    kernel = np.array([[0, 1, 0], [1, -4, 1], [0, 1, 0]])
    return cv2.filter2D(image, -1, kernel)

# Function to apply Laplacian filter (8-connected)
def laplacian_8_connected(image):
    kernel = np.array([[1, 1, 1], [1, -8, 1], [1, 1, 1]])
    return cv2.filter2D(image, -1, kernel)

# Load images
image = cv2.imread('/content/lenna.png', cv2.IMREAD_GRAYSCALE)  # Replace with your normal image path
nature_image = cv2.imread('/content/nature.jpg', cv2.IMREAD_GRAYSCALE)  # Replace with your nature image path

# Add noise to images
gaussian_noised_image = add_gaussian_noise(image)
salt_pepper_noised_image = add_salt_and_pepper_noise(image)

# Apply spatial filters
mean_filter_gaussian = cv2.blur(gaussian_noised_image, (5, 5))
median_filter_gaussian = cv2.medianBlur(gaussian_noised_image, 5)
gaussian_filter_gaussian = cv2.GaussianBlur(gaussian_noised_image, (5, 5), 0)

mean_filter_salt_pepper = cv2.blur(salt_pepper_noised_image, (5, 5))
median_filter_salt_pepper = cv2.medianBlur(salt_pepper_noised_image, 5)
gaussian_filter_salt_pepper = cv2.GaussianBlur(salt_pepper_noised_image, (5, 5), 0)

# Apply edge sharpening filter
sharpened_image = sharpen_image(nature_image)

# Apply Laplacian filters
laplacian_4_image = laplacian_4_connected(image)
laplacian_8_image = laplacian_8_connected(image)

# Display images and results in a 4x3 grid
plt.figure(figsize=(15, 20))

# Row 1: Original, Gaussian noised, and Salt-and-Pepper noised images
plt.subplot(4, 3, 1)
plt.imshow(image, cmap='gray')
plt.title("Original Image")
plt.axis('off')

plt.subplot(4, 3, 2)
plt.imshow(gaussian_noised_image, cmap='gray')
plt.title("Gaussian Noised Image")
plt.axis('off')

plt.subplot(4, 3, 3)
plt.imshow(salt_pepper_noised_image, cmap='gray')
plt.title("Salt and Pepper Noised Image")
plt.axis('off')

# Row 2: Filters applied on Gaussian noised image
plt.subplot(4, 3, 4)
plt.imshow(mean_filter_gaussian, cmap='gray')
plt.title("Mean Filter (Gaussian Noise)")
plt.axis('off')

plt.subplot(4, 3, 5)
plt.imshow(median_filter_gaussian, cmap='gray')
plt.title("Median Filter (Gaussian Noise)")
plt.axis('off')

plt.subplot(4, 3, 6)
plt.imshow(gaussian_filter_gaussian, cmap='gray')
plt.title("Gaussian Filter (Gaussian Noise)")
plt.axis('off')

# Row 3: Filters applied on Salt and Pepper noised image
plt.subplot(4, 3, 7)
plt.imshow(mean_filter_salt_pepper, cmap='gray')
plt.title("Mean Filter (Salt & Pepper Noise)")
plt.axis('off')

plt.subplot(4, 3, 8)
plt.imshow(median_filter_salt_pepper, cmap='gray')
plt.title("Median Filter (Salt & Pepper Noise)")
plt.axis('off')

plt.subplot(4, 3, 9)
plt.imshow(gaussian_filter_salt_pepper, cmap='gray')
plt.title("Gaussian Filter (Salt & Pepper Noise)")
plt.axis('off')

# Row 4: Laplacian filters and original image
plt.subplot(4, 3, 10)
plt.imshow(image, cmap='gray')
plt.title("Original Image (Laplacian)")
plt.axis('off')

plt.subplot(4, 3, 11)
plt.imshow(laplacian_4_image, cmap='gray')
plt.title("Laplacian Filter (4-connected)")
plt.axis('off')

plt.subplot(4, 3, 12)
plt.imshow(laplacian_8_image, cmap='gray')
plt.title("Laplacian Filter (8-connected)")
plt.axis('off')

# Row 5: Original nature image and sharpened image
plt.figure(figsize=(10, 5))
plt.subplot(1, 2, 1)
plt.imshow(nature_image, cmap='gray')
plt.title("Original Nature Image")
plt.axis('off')

plt.subplot(1, 2, 2)
plt.imshow(sharpened_image, cmap='gray')
plt.title("Sharpened Nature Image")
plt.axis('off')

# Show the plots
plt.tight_layout()
plt.show()
